{"version":3,"sources":["Components/Tile/index.js","Components/Slider/index.js","Components/Button/index.js","Algorithms.js","Components/Map/index.js","Components/Select/index.js","App.js","index.js"],"names":["Tile","onHoverAndDown","e","props","onTileClick","stat","this","state","classes","className","onClick","onMouseDown","onMouseOver","down","Component","size","type","value","min","max","onChange","onSizeChange","text","dijkstraAlgo","map","start","finish","table","makeTable","traverseNeighborDijkstra","route","findRoute","newRow","node","row","el","isVisited","isWall","prevNode","distFromStart","Infinity","push","curNodeLoc","recVisCount","x","y","curNode","seenNeighbor","neighbor","xn","unshift","Map","reward","minus","plus","loading","feedback","reset","setState","makeMap","changeSize","newSize","target","length","newMap","j","i","onDown","preventDefault","onUp","handleTileClick","ctrlKey","deleteWall","altKey","makeStart","shiftKey","makeFinish","makeWall","clearRoute","startSearch","canSearch","algo","Fragment","style","minWidth","onMouseUp","onMouseLeave","index","key","tile","disabled","selected","options","option","algoList","App","changeAlgo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wWAgCeA,G,8NA3BbC,eAAiB,SAAAC,GACf,EAAKC,MAAMC,YAAYF,I,uDAGf,IACAG,EAASC,KAAKH,MAAMI,MAApBF,KACJG,EAAU,QAUd,MATa,UAATH,EACFG,GAAoB,cACF,WAATH,EACTG,GAAoB,eACF,SAATH,EACTG,GAAoB,aACF,UAATH,IACTG,GAAoB,eAGpB,yBACEC,UAAWD,EACXE,QAASJ,KAAKL,eACdU,YAAaL,KAAKL,eAClBW,YAAaN,KAAKH,MAAMU,KAAOP,KAAKL,eAAiB,mB,GAtB1Ca,cCAJ,G,MAAA,SAASX,GACtB,OACE,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,cAAf,aAAuCN,EAAMY,MAC7C,2BACEN,UAAU,SACVO,KAAK,QACLC,MAAOd,EAAMc,MACbC,IAAI,IACJC,IAAI,KACJC,SAAUjB,EAAMkB,kBCVT,G,MAAA,SAASlB,GACtB,OACE,yBAAKM,UAAU,MAAMC,QAASP,EAAMO,SAAW,IAC5CP,EAAMmB,MAAQ,c,OCPRC,EAAe,SAACC,EAAKC,EAAOC,EAAQX,GAC/C,IAAIY,EAAQC,EAAUJ,GAEtBG,EAAQE,EAAyBF,EAAOF,EAAOV,EAAMU,GAAO,GAC5D,IAAIK,EAAQC,EAAUL,EAAQC,GAC9B,OAAIG,EAAM,GAAG,KAAOL,EAAM,IAAMK,EAAM,GAAG,KAAOL,EAAM,GAC7CK,EAEA,IAILF,EAAY,SAAAJ,GAChB,IACIQ,EACAC,EAFAN,EAAQ,GAmBZ,OAhBAH,EAAIA,KAAI,SAAAU,GACNF,EAAS,GACTE,EAAIV,KAAI,SAAAW,GACNF,EAAO,CACLG,WAAW,EACXC,QAAQ,EACRC,SAAU,KACVC,cAAeC,KAED,SAAZL,EAAG9B,OACL4B,EAAKI,QAAS,GAEhBL,EAAOS,KAAKR,MAEdN,EAAMc,KAAKT,MAENL,GAGHE,EAA2B,SAA3BA,EAA4BF,EAAOe,EAAY3B,EAAMU,GACzD,IAAIkB,EAAc,EACdC,EAAIF,EAAW,GACfG,EAAIH,EAAW,GACfI,EAAUnB,EAAMkB,GAAGD,GACnBA,IAAMnB,EAAM,IAAMoB,IAAMpB,EAAM,KAChCqB,EAAQV,WAAY,EACpBU,EAAQP,cAAgB,EACxBI,KAQF,IANA,IAKII,GAAe,EACnB,MAFgB,CAFP,CAACH,EAAGC,EAAI,GAAK,EAAIA,EAAI,EAAIA,GACvB,CAACD,EAAGC,EAAI,EAAI9B,EAAO8B,EAAI,EAAIA,GAH3B,CAACD,EAAI,GAAK,EAAIA,EAAI,EAAIA,EAAGC,GACxB,CAACD,EAAI,EAAI7B,EAAO6B,EAAI,EAAIA,EAAGC,IAKvC,eAAgC,CAA3B,IAAIG,EAAQ,KAAe,cACfA,EADe,GACzBC,EADyB,KAE1BhB,EAAON,EAFmB,MAETsB,GACrB,IAAIhB,EAAKI,OAeT,GAdKJ,EAAKG,UAOJH,EAAKM,cAAgBO,EAAQP,cAAgB,IAC/CN,EAAKM,cAAgBO,EAAQP,cAAgB,EAC7CN,EAAKK,SAAW,CAACM,EAAGC,GACpBE,GAAe,IATjBd,EAAKG,WAAY,EACjBH,EAAKM,cAAgBO,EAAQP,cAAgB,EAC7CN,EAAKK,SAAW,CAACM,EAAGC,GACpBF,IACAI,GAAe,GASbA,EAAc,CAAC,IAAD,EACSlB,EACvBF,EACAqB,EACAjC,EACAU,GALc,mBACfE,EADe,KAQhBgB,GARgB,MAWpB,MAAO,CAAChB,EAAOgB,IAGXZ,EAAY,SAACL,EAAQC,GAIzB,IAJoC,IAAD,cACtBD,EADsB,GAC9BkB,EAD8B,KAC3BC,EAD2B,KAE/BC,EAAUnB,EAAMkB,GAAGD,GACnBd,EAAQ,GAEVgB,EAAUnB,EAAMkB,GAAGD,GACnBd,EAAMoB,QAAQ,CAACN,EAAGC,IACO,OAArBC,EAAQR,UAHJ,mBAICQ,EAAQR,SAJT,GAIPM,EAJO,KAIJC,EAJI,KAMV,OAAOf,GC2KMqB,E,4MA7Pb5C,MAAQ,CACNQ,KAAM,GACNS,IAAK,GACL4B,QAAS,IACTC,OAAQ,EACRC,KAAM,EACNzC,MAAM,EACNY,MAAO,CAAC,EAAG,GACXC,OAAQ,GACR6B,SAAS,EACTzB,MAAO,GACP0B,SAAU,I,EAGZC,MAAQ,WACN,EAAKC,SAAL,eAAmB,EAAKnD,MAAxB,CAA+BiB,IAAK,GAAIgC,SAAU,MAAM,WACtD,EAAKG,c,EAITC,WAAa,SAAA1D,GACX,IAAI2D,EAAU3D,EAAE4D,OAAO7C,MACvB,EAAKyC,SAAL,eAEO,EAAKnD,MAFZ,CAGIQ,KAAM8C,EACNrC,IAAK,GACLgC,SAAU,MAEZ,kBAAM,EAAKG,c,EAIfA,QAAU,WAAO,IAAD,EAC6B,EAAKpD,MAAxC6C,EADM,EACNA,OAAQC,EADF,EACEA,MAAOC,EADT,EACSA,KAAM9B,EADf,EACeA,IAAKT,EADpB,EACoBA,KAClC,GAAmB,IAAfS,EAAIuC,OAAc,CAIpB,IAFA,IACI7B,EADA8B,EAAS,GAEJC,EAAI,EAAGA,EAAIlD,EAAMkD,IAAK,CAC7B/B,EAAM,GACN,IAAK,IAAIgC,EAAI,EAAGA,EAAInD,EAAMmD,IACd,IAANA,GAAiB,IAAND,EACb/B,EAAIO,KAAK,CACPG,EAAGsB,EACHrB,EAAGoB,EACH5D,KAAM,QACN+C,SACAC,QACAC,SAEOY,IAAMnD,EAAO,GAAKkD,IAAMlD,EAAO,EACxCmB,EAAIO,KAAK,CACPG,EAAGsB,EACHrB,EAAGoB,EACH5D,KAAM,SACN+C,SACAC,QACAC,SAGFpB,EAAIO,KAAK,CACPG,EAAGsB,EACHrB,EAAGoB,EACH5D,KAAM,OACN+C,SACAC,QACAC,SAINU,EAAOvB,KAAKP,GAEd,EAAKwB,SAAL,eACK,EAAKnD,MADV,CAEEiB,IAAKwC,EACLvC,MAAO,CAAC,EAAG,GACXC,OAAQ,CAACX,EAAO,EAAGA,EAAO,Q,EAKhCoD,OAAS,SAAAjE,GACPA,EAAEkE,iBACF,EAAKV,SAAL,eAAmB,EAAKnD,MAAxB,CAA+BM,MAAM,EAAM2C,SAAU,O,EAGvDa,KAAO,SAAAnE,GACLA,EAAEkE,iBACF,EAAKV,SAAL,eAAmB,EAAKnD,MAAxB,CAA+BM,MAAM,EAAO2C,SAAU,O,EAOxDc,gBAAkB,SAACpE,EAAG0C,EAAGC,GACnB3C,EAAEqE,QACJ,EAAKC,WAAW5B,EAAGC,GACV3C,EAAEuE,OACX,EAAKC,UAAU9B,EAAGC,GACT3C,EAAEyE,SACX,EAAKC,WAAWhC,EAAGC,GAEnB,EAAKgC,SAASjC,EAAGC,I,EAIrBgC,SAAW,SAACjC,EAAGC,GAAO,IACdrB,EAAQ,EAAKjB,MAAbiB,IACiB,SAAnBA,EAAIqB,GAAGD,GAAGvC,OACZmB,EAAIqB,GAAGD,GAAGvC,KAAO,OACjB,EAAKqD,SAAL,eAAmB,EAAKnD,MAAxB,CAA+BiB,MAAKgC,SAAU,Q,EAIlDgB,WAAa,SAAC5B,EAAGC,GAAO,IAChBrB,EAAQ,EAAKjB,MAAbiB,IACiB,SAAnBA,EAAIqB,GAAGD,GAAGvC,OACZmB,EAAIqB,GAAGD,GAAGvC,KAAO,OACjB,EAAKqD,SAAL,eAAmB,EAAKnD,MAAxB,CAA+BiB,MAAKgC,SAAU,Q,EAIlDkB,UAAY,SAAC9B,EAAGC,GAAO,IAAD,EACC,EAAKtC,MAApBiB,EADc,EACdA,IAAKC,EADS,EACTA,MACY,SAAnBD,EAAIqB,GAAGD,GAAGvC,OACZmB,EAAIC,EAAM,IAAIA,EAAM,IAAIpB,KAAO,OAC/B,EAAKqD,SAAL,eAAmB,EAAKnD,MAAxB,CAA+BiB,SAAO,WACpCC,EAAQ,CAACmB,EAAGC,GACZrB,EAAIqB,GAAGD,GAAGvC,KAAO,QACjB,EAAKqD,SAAL,eAAmB,EAAKnD,MAAxB,CAA+BkB,QAAOD,MAAKgC,SAAU,W,EAK3DoB,WAAa,SAAChC,EAAGC,GAAO,IAAD,EACC,EAAKtC,MAArBiB,EADe,EACfA,IAAKE,EADU,EACVA,OACY,SAAnBF,EAAIqB,GAAGD,GAAGvC,OACZmB,EAAIE,EAAO,IAAIA,EAAO,IAAIrB,KAAO,OACjC,EAAKqD,SAAL,eAAmB,EAAKnD,MAAxB,CAA+BiB,SAAO,WACpCE,EAAS,CAACkB,EAAGC,GACbrB,EAAIqB,GAAGD,GAAGvC,KAAO,SACjB,EAAKqD,SAAL,eAAmB,EAAKnD,MAAxB,CAA+BmB,SAAQF,MAAKgC,SAAU,W,EAK5DsB,WAAa,WAEX,IAFkB,IAAD,EACM,EAAKvE,MAApBiB,EADS,EACTA,IAAKM,EADI,EACJA,MACJoC,EAAI,EAAGA,EAAIpC,EAAMiC,OAAS,EAAGG,IAAK,CACzC,IAAIjC,EAAOH,EAAMoC,GACjB1C,EAAIS,EAAK,IAAIA,EAAK,IAAI5B,KAAO,OAC7B,EAAKqD,SAAL,eACK,EAAKnD,MADV,CAEEiB,MACA+B,SAAS,EACTzB,MAAO,GACP0B,SAAU,Q,EAKhBuB,YAAc,WACZ,EAAKD,aACL,EAAKpB,SAAL,eAAmB,EAAKnD,MAAxB,CAA+BgD,SAAS,KAAQ,WAAO,IAAD,EACf,EAAKhD,MAAlCiB,EAD4C,EAC5CA,IAAKC,EADuC,EACvCA,MAAOC,EADgC,EAChCA,OAAQX,EADwB,EACxBA,KACxBe,EAAQ,GACRkD,GAAY,EAChB,GAAwB,yBAApB,EAAK7E,MAAM8E,KACTnD,EAAQP,EAAaC,EAAKC,EAAOC,EAAQX,OAChB,KAApB,EAAKZ,MAAM8E,OACpBD,GAAY,EACZ,EAAKtB,SAAL,eACK,EAAKnD,MADV,CAEEiD,SAAU,8BACVD,SAAS,MAGb,GAAIyB,EAAW,CACQ,IAAjBlD,EAAMiC,OACR,EAAKL,SAAL,eACK,EAAKnD,MADV,CAEEgD,SAAS,EACTC,SAAU,qBAEc,IAAjB1B,EAAMiC,QACf,EAAKL,SAAL,eACK,EAAKnD,MADV,CAEEgD,SAAS,EACTC,SAAU,iBAGd,IAAK,IAAIU,EAAI,EAAGA,EAAIpC,EAAMiC,OAAS,EAAGG,IAAK,CACzC,IAAIjC,EAAOH,EAAMoC,GACjB1C,EAAIS,EAAK,IAAIA,EAAK,IAAI5B,KAAO,QAC7B,EAAKqD,SAAL,eACK,EAAKnD,MADV,CAEEiB,MACA+B,SAAS,EACTzB,QACA0B,SAAU,uB,kEA5GlBlD,KAAKqD,Y,+BAmHG,IAAD,SACkCrD,KAAKC,MAAtCiB,EADD,EACCA,IAAKX,EADN,EACMA,KAAM0C,EADZ,EACYA,QAASC,EADrB,EACqBA,SAC5B,OACE,kBAAC,IAAM0B,SAAP,KACE,kBAAC,EAAD,CACEjE,MAAOX,KAAKC,MAAMQ,KAClBM,aAAcf,KAAKsD,WACnB7C,KAAMT,KAAKC,MAAMQ,OAEnB,yBACEN,UAAU,MACV0E,MAAO,CAAEC,SAAS,GAAD,OAAuB,GAAlB9E,KAAKC,MAAMQ,KAAhB,OACjBsE,UAAW/E,KAAK+D,KAChB1D,YAAaL,KAAK6D,OAClBmB,aAAchF,KAAK+D,MAElB7C,EAAIA,KAAI,SAACU,EAAKqD,GACb,OACE,yBAAK9E,UAAU,MAAM+E,IAAKD,GACvBrD,EAAIV,KAAI,SAAAiE,GACP,OACE,kBAAC,EAAD,CACElF,MAAOkF,EACP5E,KAAMA,EACNT,YAAa,SAAAF,GAAC,OAAI,EAAKoE,gBAAgBpE,EAAGuF,EAAK7C,EAAG6C,EAAK5C,IACvD2C,IAAKC,EAAK7C,EAAI6C,EAAK5C,YAQhCU,EAAU,UAAY,GACtBC,EACD,yBAAK/C,UAAU,YACb,kBAAC,EAAD,CAAQa,KAAM,YAAaZ,QAASJ,KAAKyE,cACzC,kBAAC,EAAD,CAAQzD,KAAM,QAASZ,QAASJ,KAAKmD,QACrC,kBAAC,EAAD,CAAQnC,KAAM,aAAcZ,QAASJ,KAAKwE,mB,GAvPlChE,aCNH,G,MAAA,SAASX,GACtB,OACE,4BAAQiB,SAAUjB,EAAMiB,SAAUX,UAAU,UAC1C,4BAAQiF,UAAQ,EAACC,UAAQ,EAAC1E,MAAM,IAAhC,6BAGCd,EAAMyF,QAAQpE,KAAI,SAAAqE,GACjB,OACE,4BAAQL,IAAKK,EAAQ5E,MAAO4E,GACzBA,SCNPC,EAAW,CAAC,wBA6CHC,E,4MA1CbxF,MAAQ,CACN0E,KAAM,I,EAGRe,WAAa,SAAA9F,GACX,EAAKwD,SAAL,eAAmB,EAAKnD,MAAxB,CAA+B0E,KAAM/E,EAAE4D,OAAO7C,U,uDAI9C,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,CAAQmF,QAASE,EAAU1E,SAAUd,KAAK0F,aAC1C,kBAAC,EAAD,CAAKf,KAAM3E,KAAKC,MAAM0E,OACtB,yBAAKxE,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,oBACf,0CACc,uCADd,OACuC,IACrC,oDAFF,yBAKF,yBAAKA,UAAU,UACb,yBAAKA,UAAU,qBACf,2CACe,yCADf,OAC0C,IACxC,oDAFF,0BAKF,yBAAKA,UAAU,UACb,yBAAKA,UAAU,mBACf,yCACa,oDADb,sBAEE,yCAFF,QAE6B,oDAF7B,4B,GA/BMK,aCJlBmF,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.21d3b55b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./index.css\";\r\n\r\nclass Tile extends Component {\r\n  onHoverAndDown = e => {\r\n    this.props.onTileClick(e);\r\n  };\r\n\r\n  render() {\r\n    const { stat } = this.props.state;\r\n    var classes = \"tile \";\r\n    if (stat === \"start\") {\r\n      classes = classes + \"start-tile \";\r\n    } else if (stat === \"finish\") {\r\n      classes = classes + \"finish-tile \";\r\n    } else if (stat === \"wall\") {\r\n      classes = classes + \"wall-tile \";\r\n    } else if (stat === \"route\") {\r\n      classes = classes + \"route-tile \";\r\n    }\r\n    return (\r\n      <div\r\n        className={classes}\r\n        onClick={this.onHoverAndDown}\r\n        onMouseDown={this.onHoverAndDown}\r\n        onMouseOver={this.props.down ? this.onHoverAndDown : () => {}}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\n\r\nimport \"./index.css\";\r\n\r\nexport default function(props) {\r\n  return (\r\n    <div className=\"slider-container\">\r\n      <div className=\"slider-div\">Map Size: {props.size}</div>\r\n      <input\r\n        className=\"slider\"\r\n        type=\"range\"\r\n        value={props.value}\r\n        min=\"5\"\r\n        max=\"30\"\r\n        onChange={props.onSizeChange}\r\n      ></input>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./index.css\";\r\n\r\nexport default function(props) {\r\n  return (\r\n    <div className=\"btn\" onClick={props.onClick || \"\"}>\r\n      {props.text || \"new text\"}\r\n    </div>\r\n  );\r\n}\r\n","export const dijkstraAlgo = (map, start, finish, size) => {\r\n  var table = makeTable(map);\r\n  //traverse all nodes while updating table\r\n  table = traverseNeighborDijkstra(table, start, size, start)[0];\r\n  var route = findRoute(finish, table);\r\n  if (route[0][0] === start[0] && route[0][1] === start[1]) {\r\n    return route;\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nconst makeTable = map => {\r\n  var table = [];\r\n  var newRow;\r\n  var node;\r\n  map.map(row => {\r\n    newRow = [];\r\n    row.map(el => {\r\n      node = {\r\n        isVisited: false,\r\n        isWall: false,\r\n        prevNode: null,\r\n        distFromStart: Infinity\r\n      };\r\n      if (el.stat === \"wall\") {\r\n        node.isWall = true;\r\n      }\r\n      newRow.push(node);\r\n    });\r\n    table.push(newRow);\r\n  });\r\n  return table;\r\n};\r\n\r\nconst traverseNeighborDijkstra = (table, curNodeLoc, size, start) => {\r\n  var recVisCount = 0;\r\n  var x = curNodeLoc[0];\r\n  var y = curNodeLoc[1];\r\n  var curNode = table[y][x];\r\n  if (x === start[0] && y === start[1]) {\r\n    curNode.isVisited = true;\r\n    curNode.distFromStart = 0;\r\n    recVisCount++;\r\n  }\r\n  var left = [x - 1 >= 0 ? x - 1 : x, y];\r\n  var right = [x + 1 < size ? x + 1 : x, y];\r\n  var up = [x, y - 1 >= 0 ? y - 1 : y];\r\n  var down = [x, y + 1 < size ? y + 1 : y];\r\n  var neighbors = [up, down, left, right];\r\n  var seenNeighbor = false;\r\n  for (let neighbor of neighbors) {\r\n    var [xn, yn] = neighbor;\r\n    var node = table[yn][xn];\r\n    if (node.isWall) continue;\r\n    if (!node.isVisited) {\r\n      node.isVisited = true;\r\n      node.distFromStart = curNode.distFromStart + 1;\r\n      node.prevNode = [x, y];\r\n      recVisCount++;\r\n      seenNeighbor = true;\r\n    } else {\r\n      if (node.distFromStart > curNode.distFromStart + 1) {\r\n        node.distFromStart = curNode.distFromStart + 1;\r\n        node.prevNode = [x, y];\r\n        seenNeighbor = true;\r\n      }\r\n    }\r\n    var childVisCount;\r\n    if (seenNeighbor) {\r\n      [table, childVisCount] = traverseNeighborDijkstra(\r\n        table,\r\n        neighbor,\r\n        size,\r\n        start,\r\n        recVisCount\r\n      );\r\n      recVisCount += childVisCount;\r\n    }\r\n  }\r\n  return [table, recVisCount];\r\n};\r\n\r\nconst findRoute = (finish, table) => {\r\n  var [x, y] = finish;\r\n  var curNode = table[y][x];\r\n  var route = [];\r\n  while (1) {\r\n    curNode = table[y][x];\r\n    route.unshift([x, y]);\r\n    if (curNode.prevNode === null) break;\r\n    [x, y] = curNode.prevNode;\r\n  }\r\n  return route;\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport Tile from \"../Tile\";\r\nimport Slider from \"../Slider\";\r\nimport Button from \"../Button\";\r\n\r\nimport { dijkstraAlgo } from \"../../Algorithms\";\r\n\r\nclass Map extends Component {\r\n  state = {\r\n    size: 10,\r\n    map: [],\r\n    reward: -0.04,\r\n    minus: -1,\r\n    plus: 1,\r\n    down: false,\r\n    start: [0, 0],\r\n    finish: [],\r\n    loading: false,\r\n    route: [],\r\n    feedback: \"\"\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ ...this.state, map: [], feedback: \"\" }, () => {\r\n      this.makeMap();\r\n    });\r\n  };\r\n\r\n  changeSize = e => {\r\n    var newSize = e.target.value;\r\n    this.setState(\r\n      {\r\n        ...this.state,\r\n        size: newSize,\r\n        map: [],\r\n        feedback: \"\"\r\n      },\r\n      () => this.makeMap()\r\n    );\r\n  };\r\n\r\n  makeMap = () => {\r\n    const { reward, minus, plus, map, size } = this.state;\r\n    if (map.length === 0) {\r\n      //if empty, we make new map\r\n      var newMap = [];\r\n      var row;\r\n      for (let j = 0; j < size; j++) {\r\n        row = [];\r\n        for (let i = 0; i < size; i++) {\r\n          if (i === 0 && j === 0) {\r\n            row.push({\r\n              x: i,\r\n              y: j,\r\n              stat: \"start\",\r\n              reward,\r\n              minus,\r\n              plus\r\n            });\r\n          } else if (i === size - 1 && j === size - 1) {\r\n            row.push({\r\n              x: i,\r\n              y: j,\r\n              stat: \"finish\",\r\n              reward,\r\n              minus,\r\n              plus\r\n            });\r\n          } else {\r\n            row.push({\r\n              x: i,\r\n              y: j,\r\n              stat: \"tile\",\r\n              reward,\r\n              minus,\r\n              plus\r\n            });\r\n          }\r\n        }\r\n        newMap.push(row);\r\n      }\r\n      this.setState({\r\n        ...this.state,\r\n        map: newMap,\r\n        start: [0, 0],\r\n        finish: [size - 1, size - 1]\r\n      });\r\n    }\r\n  };\r\n\r\n  onDown = e => {\r\n    e.preventDefault();\r\n    this.setState({ ...this.state, down: true, feedback: \"\" });\r\n  };\r\n\r\n  onUp = e => {\r\n    e.preventDefault();\r\n    this.setState({ ...this.state, down: false, feedback: \"\" });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.makeMap();\r\n  }\r\n\r\n  handleTileClick = (e, x, y) => {\r\n    if (e.ctrlKey) {\r\n      this.deleteWall(x, y);\r\n    } else if (e.altKey) {\r\n      this.makeStart(x, y);\r\n    } else if (e.shiftKey) {\r\n      this.makeFinish(x, y);\r\n    } else {\r\n      this.makeWall(x, y);\r\n    }\r\n  };\r\n\r\n  makeWall = (x, y) => {\r\n    var { map } = this.state;\r\n    if (map[y][x].stat === \"tile\") {\r\n      map[y][x].stat = \"wall\";\r\n      this.setState({ ...this.state, map, feedback: \"\" });\r\n    }\r\n  };\r\n\r\n  deleteWall = (x, y) => {\r\n    var { map } = this.state;\r\n    if (map[y][x].stat === \"wall\") {\r\n      map[y][x].stat = \"tile\";\r\n      this.setState({ ...this.state, map, feedback: \"\" });\r\n    }\r\n  };\r\n\r\n  makeStart = (x, y) => {\r\n    var { map, start } = this.state;\r\n    if (map[y][x].stat === \"tile\") {\r\n      map[start[1]][start[0]].stat = \"tile\";\r\n      this.setState({ ...this.state, map }, () => {\r\n        start = [x, y];\r\n        map[y][x].stat = \"start\";\r\n        this.setState({ ...this.state, start, map, feedback: \"\" });\r\n      });\r\n    }\r\n  };\r\n\r\n  makeFinish = (x, y) => {\r\n    var { map, finish } = this.state;\r\n    if (map[y][x].stat === \"tile\") {\r\n      map[finish[1]][finish[0]].stat = \"tile\";\r\n      this.setState({ ...this.state, map }, () => {\r\n        finish = [x, y];\r\n        map[y][x].stat = \"finish\";\r\n        this.setState({ ...this.state, finish, map, feedback: \"\" });\r\n      });\r\n    }\r\n  };\r\n\r\n  clearRoute = () => {\r\n    const { map, route } = this.state;\r\n    for (let i = 1; i < route.length - 1; i++) {\r\n      var node = route[i];\r\n      map[node[1]][node[0]].stat = \"tile\";\r\n      this.setState({\r\n        ...this.state,\r\n        map,\r\n        loading: false,\r\n        route: [],\r\n        feedback: \"\"\r\n      });\r\n    }\r\n  };\r\n\r\n  startSearch = () => {\r\n    this.clearRoute();\r\n    this.setState({ ...this.state, loading: true }, () => {\r\n      const { map, start, finish, size } = this.state;\r\n      var route = [];\r\n      var canSearch = true;\r\n      if (this.props.algo === \"Dijkstra's Algorithm\") {\r\n        var route = dijkstraAlgo(map, start, finish, size);\r\n      } else if (this.props.algo === \"\") {\r\n        canSearch = false;\r\n        this.setState({\r\n          ...this.state,\r\n          feedback: \"Please choose an algorithm.\",\r\n          loading: false\r\n        });\r\n      }\r\n      if (canSearch) {\r\n        if (route.length === 0) {\r\n          this.setState({\r\n            ...this.state,\r\n            loading: false,\r\n            feedback: \"Path not found!\"\r\n          });\r\n        } else if (route.length === 2) {\r\n          this.setState({\r\n            ...this.state,\r\n            loading: false,\r\n            feedback: \"Path found!\"\r\n          });\r\n        }\r\n        for (let i = 1; i < route.length - 1; i++) {\r\n          var node = route[i];\r\n          map[node[1]][node[0]].stat = \"route\";\r\n          this.setState({\r\n            ...this.state,\r\n            map,\r\n            loading: false,\r\n            route,\r\n            feedback: \"Path found!\"\r\n          });\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { map, down, loading, feedback } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <Slider\r\n          value={this.state.size}\r\n          onSizeChange={this.changeSize}\r\n          size={this.state.size}\r\n        ></Slider>\r\n        <div\r\n          className=\"map\"\r\n          style={{ minWidth: `${this.state.size * 25}px` }}\r\n          onMouseUp={this.onUp}\r\n          onMouseDown={this.onDown}\r\n          onMouseLeave={this.onUp}\r\n        >\r\n          {map.map((row, index) => {\r\n            return (\r\n              <div className=\"row\" key={index}>\r\n                {row.map(tile => {\r\n                  return (\r\n                    <Tile\r\n                      state={tile}\r\n                      down={down}\r\n                      onTileClick={e => this.handleTileClick(e, tile.x, tile.y)}\r\n                      key={tile.x + tile.y}\r\n                    ></Tile>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        {loading ? \"loading\" : \"\"}\r\n        {feedback}\r\n        <div className=\"find-btn\">\r\n          <Button text={\"Find Path\"} onClick={this.startSearch}></Button>\r\n          <Button text={\"Reset\"} onClick={this.reset}></Button>\r\n          <Button text={\"Clear Path\"} onClick={this.clearRoute}></Button>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\n\r\nimport \"./index.css\";\r\n\r\nexport default function(props) {\r\n  return (\r\n    <select onChange={props.onChange} className=\"select\">\r\n      <option disabled selected value=\"\">\r\n        -- Select an algorithm --\r\n      </option>\r\n      {props.options.map(option => {\r\n        return (\r\n          <option key={option} value={option}>\r\n            {option}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Map from \"./Components/Map\";\nimport Button from \"./Components/Button\";\nimport Select from \"./Components/Select\";\n\nconst algoList = [\"Dijkstra's Algorithm\"];\n\nclass App extends Component {\n  state = {\n    algo: \"\"\n  };\n\n  changeAlgo = e => {\n    this.setState({ ...this.state, algo: e.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Select options={algoList} onChange={this.changeAlgo}></Select>\n        <Map algo={this.state.algo}></Map>\n        <div className=\"legends\">\n          <div className=\"legend\">\n            <div className=\"tile start-tile\"></div>\n            <p>\n              Start (hold <strong>alt</strong> and{\" \"}\n              <strong>left-mouse-click</strong> to move start tile)\n            </p>\n          </div>\n          <div className=\"legend\">\n            <div className=\"tile finish-tile\"></div>\n            <p>\n              Finish (hold <strong>shift</strong> and{\" \"}\n              <strong>left-mouse-click</strong> to move finish tile)\n            </p>\n          </div>\n          <div className=\"legend\">\n            <div className=\"tile wall-tile\"></div>\n            <p>\n              Wall (hold <strong>left-mouse-click</strong> to add walls. hold\n              <strong> ctrl</strong> and <strong>left-mouse-click</strong> to\n              remove walls)\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}